apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'

mainClassName='io.github.ibengineering.Main'

repositories {
    jcenter()

    //Uncomment this if you install local dependencies.
    //mavenLocal()

    //Uncomment this if you use external dependencies
    //mavenCentral()

    //Uncomment this if you use jme3-niftygui
    //maven{url 'http://nifty-gui.sourceforge.net/nifty-maven-repo'}

	//getting neuroph
	maven {
		url 'http://neuroph.sourceforge.net/maven2/'
	}
	
	flatDir {
       dirs 'libs'
	}
}

ext.jmeVersion = '3.1.0-stable'

project(":assets") {
    apply plugin: "java"

    buildDir = rootProject.file("build/assets")

    sourceSets {
        main {
            resources {
                srcDir '.'
            }
        }
    }
}


dependencies {

	//neuroph
	compile 'org.neuroph:neuroph-core:2.94'

	//jme
	compile "org.jmonkeyengine:jme3-core:$jmeVersion"
	compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
	compile "org.jmonkeyengine:jme3-lwjgl:$jmeVersion"
	
	//compile "org.jmonkeyengine:jme3-android-native:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-android:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-bullet-native-android:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-blender:$jmeVersion"
	compile "org.jmonkeyengine:jme3-bullet-native:$jmeVersion"
	compile "org.jmonkeyengine:jme3-bullet:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-effects:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-jogg:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-jogl:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-lwjgl3:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-networking:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-plugins:$jmeVersion"
	//compile "org.jmonkeyengine:jme3-terrain:$jmeVersion"
	
	//lemur
	compile "com.simsilica:lemur:1.10.1"
    compile "com.simsilica:lemur-proto:1.9.1"

	//Standard utility stuff
    compile 'com.google.guava:guava:19.0'
    compile 'org.codehaus.groovy:groovy-all:2.4.7'

	//logging
	compile 'org.slf4j:slf4j-api:1.7.25'
	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'ch.qos.logback:logback-core:1.2.3'

	compile name: 'Lina'

    runtime project(':assets')
}

task wrapper(type: Wrapper) {
}

task createDirs << {

    def pkg = 'mygame'
    def dirs = [
        file("./src/main/java/$pkg"),
        file("./src/main/resources"),
        file("./assets/Interface"),
        file("./assets/MatDefs"),
        file("./assets/Materials"),
        file("./assets/Models"),
        file("./assets/Scenes"),
        file("./assets/Shaders"),
        file("./assets/Sounds"),
        file("./assets/Textures"),
    ]

    dirs.each {
        if( !it.exists() ) {
            println "Creating " + it
            it.mkdirs()
        }
        if( it.listFiles().length == 0 ) {
            def stub = new File(it, 'removeme.txt')
            println "Creating stub file to allow git checkin, file:$stub"
            stub.text = "Remove me when there are files here."
        }
    }
}
